{"version":3,"sources":["widgets.js","network/services.js","content/comment.js","content/tickets.js","content/tools.js","content/archive.js","content/faq.js","content/submit.js","index.js"],"names":["FromDatetime","this","convertDateTimeFromSQL","props","post_date","date","str","split","year","month","time","day","restTime","React","PlaceholderTicket","Row","className","Card","Button","variant","disabled","Alert","alerts","map","alert","i","key","id","type","role","text","onClick","splice","setTimeout","instances","push","nextId","Component","NavBarLink","activeClassName","exact","to","children","NavBar","brand","Link","TicketService","json","axios","post","priority","get","ticket_id","put","ticketService","sharedComponentData","Comments","state","comments","length","comment","Col","sm","content","getComments","then","res","data","setState","CommentSubmit","handleInputChange","bind","handleSubmit","Form","onSubmit","Group","Control","maxLength","name","placeholder","value","onChange","event","target","checked","preventDefault","submitComment","window","location","reload","createComment","console","log","FocusedTicket","tickets","ticket","headline","picture","email","group_id","author","updateTicketPriority","deFocusTicket","alt","src","sendEmail","archiveTicket","getTickets","url","open","category","solveTicket","TicketList","Table","responsive","striped","bordered","hover","max-width","refresh","focusTicket","LiveFeed","intervalID","ListGroup","Item","horizontal","substring","updateTickets","startUpdater","clearInterval","setInterval","getAllTickets","ToolBar","ArchiveList","recoverTicket","Faq","SubmitForm","submitTicket","class","Text","as","rows","cols","createTicket","Menu","Footer","root","document","getElementById","ReactDOM","render","path","component"],"mappings":"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","file":"static/js/main.49f2cd86.chunk.js","sourcesContent":["// @flow\r\n\r\nimport * as React from 'react';\r\nimport {Component} from 'react-simplified';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {Button, Card, Row} from \"react-bootstrap\";\r\n\r\n\r\nexport class FromDatetime extends React.Component<{post_date : String}> {\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                    {this.convertDateTimeFromSQL(this.props.post_date)}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    convertDateTimeFromSQL(date: string) {\r\n        var str = date.split('-');\r\n        var year = str[0];\r\n        var month = str[1];\r\n        var rest = str[2];\r\n        var time = rest.split('T');\r\n        var day = time[0];\r\n        var restTime = time[1].split(':');\r\n        var hour = restTime[0];\r\n        var minute = restTime[1];\r\n        return hour + ':' + minute + ', ' + day + '.' + month + '.' + year;\r\n    }\r\n}\r\n\r\nexport class PlaceholderTicket extends React.Component {\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <div className=\"col-lg-4\">\r\n                    <Card className=\"m-4 bg-dark text-white\">\r\n                        <Button variant=\"outline-info\" disabled>Placeholder ticket</Button>\r\n                        <div className=\"card-header\"><h5\r\n                            className=\"card-title text-center\"><span className=\"text-info\">Focus</span> to place\r\n                            tickets here</h5>\r\n                        </div>\r\n                        <div className=\"card-body\">\r\n                            <p className=\"card-subtitle m-2 text-center\"><span className=\"text-info\">Focus</span> a\r\n                                ticket from the list below to move it here, and get access to additional support\r\n                                tools</p>\r\n                            <br/>\r\n                            <br/>\r\n                        </div>\r\n                        <br/>\r\n                        <br/>\r\n                    </Card>\r\n                </div>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\nexport class Alert extends Component {\r\n    alerts: { id: number, text: React.Node, type: string }[] = [];\r\n    static nextId = 0;\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.alerts.map((alert, i) => (\r\n                    <div key={alert.id} className={'alert alert-' + alert.type} role=\"alert\">\r\n                        {alert.text}\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"close\"\r\n                            onClick={() => {\r\n                                this.alerts.splice(i, 1);\r\n                            }}\r\n                        >\r\n                            &times;\r\n                        </button>\r\n                    </div>\r\n                ))}\r\n            </>\r\n        );\r\n    }\r\n\r\n    static success(text: React.Node) {\r\n        // To avoid 'Cannot update during an existing state transition' errors, run after current event through setTimeout\r\n        setTimeout(() => {\r\n            for (let instance of Alert.instances()) instance.alerts.push({\r\n                id: Alert.nextId++,\r\n                text: text,\r\n                type: 'success'\r\n            });\r\n        });\r\n    }\r\n\r\n    static info(text: React.Node) {\r\n        // To avoid 'Cannot update during an existing state transition' errors, run after current event through setTimeout\r\n        setTimeout(() => {\r\n            for (let instance of Alert.instances()) instance.alerts.push({\r\n                id: Alert.nextId++,\r\n                text: text,\r\n                type: 'info'\r\n            });\r\n        });\r\n    }\r\n\r\n    static warning(text: React.Node) {\r\n        // To avoid 'Cannot update during an existing state transition' errors, run after current event through setTimeout\r\n        setTimeout(() => {\r\n            for (let instance of Alert.instances()) instance.alerts.push({\r\n                id: Alert.nextId++,\r\n                text: text,\r\n                type: 'warning'\r\n            });\r\n        });\r\n    }\r\n\r\n    static danger(text: React.Node) {\r\n        // To avoid 'Cannot update during an existing state transition' errors, run after current event through setTimeout\r\n        setTimeout(() => {\r\n            for (let instance of Alert.instances()) instance.alerts.push({\r\n                id: Alert.nextId++,\r\n                text: text,\r\n                type: 'danger'\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nclass NavBarLink extends Component<{ exact?: boolean, to: string, children?: React.Node }> {\r\n    render() {\r\n        return (\r\n            <NavLink className=\"nav-link\" activeClassName=\"active\" exact={this.props.exact} to={this.props.to}>\r\n                {this.props.children}\r\n            </NavLink>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Renders a navigation bar using Bootstrap classes\r\n */\r\nexport class NavBar extends Component<{ brand?: React.Node, children?: React.Node }> {\r\n    static Link = NavBarLink;\r\n\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-expand-sm bg-light navbar-light\">\r\n                {\r\n                    <NavLink className=\"navbar-brand\" activeClassName=\"active\" exact to=\"/\">\r\n                        {this.props.brand}\r\n                    </NavLink>\r\n                }\r\n                <ul className=\"navbar-nav\">{this.props.children}</ul>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Renders a column with specified width using Bootstrap classes\r\n */\r\nexport class Column extends Component<{ width?: number, right?: boolean, children?: React.Node }> {\r\n    render() {\r\n        return (\r\n            <div\r\n                className={'col' + (this.props.width ? '-' + this.props.width : '') + (this.props.right ? ' text-right' : '')}\r\n            >\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","// @flow\r\n\r\nimport axios from 'axios';\r\n\r\n\r\nimport {sharedComponentData} from \"react-simplified\";\r\n\r\nexport class Ticket {\r\n    ticket_id: number;\r\n    headline: String;\r\n    priority: number;\r\n    category: String;\r\n    picture: String;\r\n    post_date: String;\r\n    author: String;\r\n}\r\n\r\n\r\nclass TicketService {\r\n\r\n\r\n    createTicket(json: Object) {\r\n        return axios.post<>('/create_ticket', json);\r\n    }\r\n\r\n    createComment(json: Object) {\r\n        return axios.post<>('/create_comment', json);\r\n    }\r\n\r\n    getTickets(priority: number): Promise<any> {\r\n        return axios.get<>('/tickets/priority/' + priority);\r\n    }\r\n\r\n    getComments(ticket_id: number): Promise<any> {\r\n        return axios.get<>('/comments/ticket_id/' + ticket_id);\r\n    }\r\n\r\n    getAllTickets(): Promise<any> {\r\n        return axios.get<>('/tickets/');\r\n    }\r\n\r\n    updateTicketPriority(json: Object): Promise<any> {\r\n        return axios.put('/tickets', json);\r\n    }\r\n\r\n    solveTicket(json: Object) {\r\n        return axios.put<>('/tickets', json);\r\n    }\r\n\r\n    getGroups() {\r\n        return axios.get<>('/groups');\r\n    }\r\n}\r\n\r\nexport let ticketService = sharedComponentData(new TicketService());\r\n\r\n\r\n","// @flow\r\n\r\nimport {ticketService} from \"../network/services\";\r\nimport {Button, Row, Form, Col} from \"react-bootstrap\";\r\nimport React from 'react';\r\nimport {FromDatetime} from \"../widgets\";\r\n\r\nexport class Comments extends React.Component {\r\n    state: {\r\n        comments: ?[],\r\n    };\r\n\r\n    constructor(props: Object) {\r\n        super(props);\r\n        this.state = {\r\n            comments: [],\r\n        };\r\n    }\r\n\r\n    render(): void {\r\n        if (this.state.comments.length === 0) return (<h5>No comments yet</h5>);\r\n        return (\r\n            <div>\r\n                <h5>Comments:</h5>\r\n                {this.state.comments.map(comment => (\r\n                    <Row>\r\n                        <Col sm={3}>\r\n                                <div className={\"text-muted\"}> {<FromDatetime post_date={comment.post_date}></FromDatetime>} </div>\r\n                        </Col>\r\n\r\n                        <Col sm={9}>\r\n                                <div className={\"card-text\"}>{comment.content}</div>\r\n                        </Col>\r\n                    </Row>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        ticketService\r\n            .getComments(this.props.id)\r\n            .then(res => {\r\n                const comments = res.data;\r\n                this.setState({comments})\r\n            });\r\n    }\r\n\r\n    convertDateTimeFromSQL(date: string) {\r\n        var str = date.split('-');\r\n        var year = str[0];\r\n        var month = str[1];\r\n        var rest = str[2];\r\n        var time = rest.split('T');\r\n        var day = time[0];\r\n        var restTime = time[1].split(':');\r\n        var hour = restTime[0];\r\n        var minute = restTime[1];\r\n        return hour + ':' + minute + ', ' + day + '.' + month + '.' + year;\r\n    }\r\n}\r\n\r\nexport class CommentSubmit extends React.Component {\r\n    state: {\r\n        content: string,\r\n        priority: number,\r\n        post_date: string,\r\n        ticket_id: number\r\n    };\r\n\r\n    constructor(props: Object) {\r\n        super(props);\r\n        this.state = {\r\n            content: '',\r\n            priority: 1,\r\n            post_date: '2019-03-15 01:01:22',\r\n            ticket_id: this.props.id\r\n        };\r\n\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"ml-3\"}>\r\n                <Form onSubmit={this.handleSubmit}>\r\n                    <Row>\r\n\r\n                        <Form.Group>\r\n                            <Form.Control type=\"textarea\" maxLength=\"75\" name=\"commentSubmit\"\r\n                                          placeholder=\"Write a comment\" value={this.state.content}\r\n                                          onChange={this.handleInputChange}/>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group>\r\n                            <Button className=\"ml-2\" variant=\"btn btn-primary bt-md\" type=\"submit\"> Submit </Button>\r\n                        </Form.Group>\r\n                    </Row>\r\n\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n\r\n        this.setState({content: value});\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.submitComment();\r\n    }\r\n\r\n    submitComment() {\r\n        window.location.reload();\r\n        let json = {\r\n            \"content\": this.state.content,\r\n            \"priority\": this.state.priority,\r\n            \"post_date\": this.state.post_date,\r\n            \"ticket_id\": this.state.ticket_id\r\n        };\r\n        ticketService.createComment(json).then(() => console.log(\"comment created successfully\"));\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"this is the submit form for comment id \" + this.props.id);\r\n\r\n    }\r\n\r\n\r\n}","// @flow\r\n\r\nimport {ticketService} from \"../network/services\";\r\nimport {Button, Card, Table, Row, Col} from \"react-bootstrap\";\r\nimport React from 'react';\r\nimport {Comments, CommentSubmit} from \"./comment\";\r\nimport {FromDatetime, PlaceholderTicket} from \"../widgets\";\r\n\r\nexport class FocusedTicket extends React.Component<{}> {\r\n    state: {\r\n        tickets: ?[],\r\n    };\r\n\r\n    constructor(props: Object) {\r\n        super(props);\r\n        this.state = {\r\n            tickets: [],\r\n        };\r\n\r\n    }\r\n\r\n    deFocusTicket(ticket: Object): void {\r\n        window.location.reload();\r\n        let json: {} = {\r\n            \"ticket_id\": ticket.ticket_id,\r\n            \"headline\": ticket.headline,\r\n            \"content\": ticket.content,\r\n            \"priority\": 2,\r\n            \"picture\": ticket.picture,\r\n            \"post_date\": ticket.post_date,\r\n            \"email\": ticket.email,\r\n            \"group_id\": ticket.group_id,\r\n            \"author\": ticket.author\r\n        };\r\n        ticketService.updateTicketPriority(json);\r\n    }\r\n\r\n    render(): void {\r\n\r\n        if (this.state.tickets.length < 1) return (<PlaceholderTicket/>);\r\n\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    {this.state.tickets.map(ticket => (\r\n                        <div className={\"col-lg-4\"}>\r\n                            <Card className=\"m-4 bg-dark text-white\">\r\n                                <Button variant=\"outline-info\"\r\n                                        onClick={() => this.deFocusTicket(ticket)}>Defocus</Button>\r\n                                <div className=\"card-header\"><h5\r\n                                    className=\"card-title\">{ticket.headline}</h5>\r\n                                </div>\r\n                                <div className=\"card-body\">\r\n                                    <img className=\"card-img-top img-fluid\" alt={ticket.headline} src={ticket.picture}/>\r\n                                    <p className=\"card-subtitle m-2\">{ticket.content}</p>\r\n                                </div>\r\n                                <div className=\"card-footer\">\r\n                                    <p className=\"card-text\">Ticket number: {ticket.ticket_id}</p>\r\n                                    <p className=\"card-subtitle mb-2 text-light\">Customer: {ticket.author}</p>\r\n                                    <p className=\"card-subtitle mb-2\"><Button variant=\"link\" onClick={() => this.sendEmail(ticket)}>Contact</Button></p>\r\n\r\n                                    <Row>\r\n                                        <Col sm={3}>\r\n                                            <p className={\"text-white\"}>Ticket posted:</p>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <p className={\"text-muted\"}><FromDatetime post_date={ticket.post_date}/></p>\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                    <Comments id={ticket.ticket_id}/>\r\n                                    <br/>\r\n                                    <CommentSubmit id={ticket.ticket_id}/>\r\n\r\n                                </div>\r\n                                <Button variant=\"outline-danger\" onClick={() => this.archiveTicket(ticket)}>Mark as\r\n                                    solved</Button>\r\n                            </Card>\r\n                        </div>\r\n                    ))}\r\n                </Row>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        ticketService\r\n            .getTickets(1).then(res => {\r\n            const tickets = res.data;\r\n            this.setState({tickets})\r\n        });\r\n    }\r\n\r\n    sendEmail(ticket: object) {\r\n        let url = ticket.email;\r\n        window.open('mailto:' + url, '_blank');\r\n    }\r\n\r\n    archiveTicket(ticket: Object) {\r\n        window.location.reload();\r\n        let json: {} = {\r\n            \"ticket_id\": ticket.ticket_id,\r\n            \"headline\": ticket.headline,\r\n            \"content\": ticket.content,\r\n            \"priority\": 3,\r\n            \"category\": ticket.category,\r\n            \"picture\": ticket.picture,\r\n            \"post_date\": ticket.post_date,\r\n            \"author\": ticket.author\r\n        };\r\n        ticketService.solveTicket(json);\r\n    }\r\n}\r\n\r\nexport class TicketList extends React.Component<{}> {\r\n    state: {\r\n        tickets: ?[],\r\n    };\r\n\r\n    constructor(props: Object) {\r\n        super(props);\r\n        this.state = {\r\n            tickets: [],\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card m-4 bg-dark text-white\">\r\n                <Table responsive={\"sm\"} striped bordered hover variant=\"dark\" max-width={20}>\r\n                    <thead>\r\n                    <tr>\r\n                        <th><Button variant={\"success\"} onClick={() => this.refresh()}>Refresh list</Button></th>\r\n                        <th>Ticket ID</th>\r\n                        <th>Customer</th>\r\n                        <th>Order Number</th>\r\n                        <th>Content</th>\r\n                        <th>Submitted</th>\r\n                        <th>Archive</th>\r\n\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {this.state.tickets.map(ticket => (\r\n                        <tr>\r\n                            <td>\r\n                                <Button variant=\"info\" onClick={() => this.focusTicket(ticket)}>Focus</Button>\r\n                            </td>\r\n                            <td>{ticket.ticket_id}</td>\r\n                            <td>{ticket.author}</td>\r\n                            <td>{ticket.headline}</td>\r\n                            <td>{ticket.content}</td>\r\n                            <td><FromDatetime post_date={ticket.post_date}/></td>\r\n                            <td>\r\n                                <Button variant=\"danger\" onClick={() => this.archiveTicket(ticket)}>Mark as\r\n                                    solved</Button>\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    focusTicket(ticket: Object) {\r\n        window.location.reload();\r\n        let json: {} = {\r\n            \"ticket_id\": ticket.ticket_id,\r\n            \"headline\": ticket.headline,\r\n            \"content\": ticket.content,\r\n            \"priority\": 1,\r\n            \"picture\": ticket.picture,\r\n            \"post_date\": ticket.post_date,\r\n            \"email\": ticket.email,\r\n            \"group_id\": ticket.group_id,\r\n            \"author\": ticket.author\r\n        };\r\n        ticketService.updateTicketPriority(json);\r\n    }\r\n\r\n    componentDidMount() {\r\n        ticketService.getTickets(2).then(res => {\r\n            const tickets = res.data;\r\n            this.setState({tickets})\r\n        });\r\n    }\r\n\r\n    refresh() {\r\n        window.location.reload();\r\n    }\r\n\r\n    archiveTicket(ticket: Object) {\r\n        window.location.reload();\r\n        let json: {} = {\r\n            \"ticket_id\": ticket.ticket_id,\r\n            \"headline\": ticket.headline,\r\n            \"content\": ticket.content,\r\n            \"priority\": 3,\r\n            \"category\": ticket.category,\r\n            \"picture\": ticket.picture,\r\n            \"post_date\": ticket.post_date,\r\n            \"author\": ticket.author\r\n        };\r\n        ticketService.solveTicket(json);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","//@ flow\r\n\r\nimport {ticketService} from \"../network/services\";\r\nimport {Row, Card, ListGroup, Button} from \"react-bootstrap\";\r\nimport React from 'react'\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\n\r\nexport class LiveFeed extends React.Component {\r\n    intervalID = 0;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tickets: [],\r\n        };\r\n    }\r\n\r\n    render(): html {\r\n\r\n        if (this.state.tickets.length === 0) return (\r\n            <div><Row> <ListGroup.Item className={\"m-2\"} variant={\"primary\"}>No new tickets</ListGroup.Item> </Row>\r\n            </div>)\r\n        return (\r\n            <div>\r\n                <ListGroup horizontal variant={\"flush\"}>\r\n                    <Row>\r\n                        <ListGroup.Item className={\"m-2\"} variant={\"danger\"}>Latest tickets:</ListGroup.Item>\r\n                        {this.state.tickets.map(ticket => (\r\n                            <div>\r\n                                <ListGroup.Item onClick={() => this.focusTicket(ticket)} className={\"m-2\"}\r\n                                                variant={\"dark\"}>\r\n\r\n                                    {this.convertDateTimeFromSQL(ticket.post_date)}\"{ticket.content.substring(0, 25)}...\"\r\n                                    by {ticket.author}\r\n\r\n                                </ListGroup.Item>\r\n                            </div>\r\n                        ))}\r\n                    </Row>\r\n                </ListGroup>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.updateTickets();\r\n        this.startUpdater();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalID);\r\n    }\r\n\r\n\r\n    focusTicket(ticket: Object) {\r\n        window.location.reload();\r\n        let json: {} = {\r\n            \"ticket_id\": ticket.ticket_id,\r\n            \"headline\": ticket.headline,\r\n            \"content\": ticket.content,\r\n            \"priority\": 1,\r\n            \"picture\": ticket.picture,\r\n            \"post_date\": ticket.post_date,\r\n            \"email\": ticket.email,\r\n            \"group_id\": ticket.group_id,\r\n            \"author\": ticket.author\r\n        };\r\n        ticketService.updateTicketPriority(json);\r\n    }\r\n\r\n    startUpdater(): void {\r\n        this.intervalID = setInterval(() => {\r\n                this.updateTickets()\r\n            }, 5000\r\n        );\r\n    }\r\n\r\n    updateTickets(): void {\r\n        ticketService\r\n            .getAllTickets().then(res => {\r\n            const tickets = res.data;\r\n            this.setState({tickets})\r\n        });\r\n    }\r\n\r\n    convertDateTimeFromSQL(date) {\r\n        var str = date.split('-');\r\n        var rest = str[2];\r\n        var time = rest.split('T');\r\n        var restTime = time[1].split(':');\r\n        var hour = restTime[0];\r\n        var minute = restTime[1];\r\n        return hour + ':' + minute + ': ';\r\n    }\r\n}\r\n\r\n//Grouper is a filter for all the tickets, to sort them into their respective category, based on their group. This will be implemented later.\r\nexport class Grouper extends React.Component {\r\n    constructor(props: Object) {\r\n        super(props);\r\n        this.state = {\r\n            groups: [],\r\n        };\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    {this.state.groups.map(group => (\r\n                        <Col sm={1}>\r\n                            <div>\r\n                                <Button variant={\"light\"}>{group.group_name}</Button>\r\n                            </div>\r\n                        </Col>\r\n                    ))}\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    componentDidMount(): void {\r\n        ticketService\r\n            .getGroups()\r\n            .then(res => {\r\n                const groups = res.data;\r\n                this.setState({groups})\r\n            });\r\n    }\r\n\r\n}\r\n\r\n\r\nexport class ToolBar extends React.Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Card className=\"m-4 bg-dark text-white\">\r\n                    <div\r\n                        className=\"card-header\"><h5 className=\"card-title\">Toolbar</h5>\r\n                        <LiveFeed></LiveFeed>\r\n                    </div>\r\n                </Card>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","// @flow\r\nimport {Component} from \"react-simplified\";\r\nimport {ticketService} from \"../network/services\";\r\nimport {Button, Table} from \"react-bootstrap\";\r\n\r\nimport React from 'react';\r\n\r\nexport class ArchiveList extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tickets : [],\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card m-4 bg-dark text-white\">\r\n                <Table responsive={\"sm\"} striped bordered hover variant=\"dark\" max-width={20}>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Recover</th>\r\n                        <th>Ticket ID</th>\r\n                        <th>Customer</th>\r\n                        <th>Order Number</th>\r\n                        <th>Content</th>\r\n                        <th>Submitted</th>\r\n\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {this.state.tickets.map(ticket => (\r\n                        <tr>\r\n                            <td>\r\n                                <Button variant=\"warning\" onClick={() => this.recoverTicket(ticket)}>Recover ticket</Button>\r\n                            </td>\r\n                            <td>{ticket.ticket_id}</td>\r\n                            <td>{ticket.author}</td>\r\n                            <td>{ticket.headline}</td>\r\n                            <td>{ticket.content}</td>\r\n                            <td>{this.convertDateTimeFromSQL(ticket.post_date)}</td>\r\n\r\n                        </tr>\r\n                    ))}\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    recoverTicket(ticket){\r\n        window.location.reload();\r\n        let json: {} = {\r\n            \"ticket_id\": ticket.ticket_id,\r\n            \"headline\": ticket.headline,\r\n            \"content\": ticket.content,\r\n            \"priority\": 2,\r\n            \"picture\": ticket.picture,\r\n            \"post_date\": ticket.post_date,\r\n            \"email\":ticket.email,\r\n            \"group_id\":ticket.group_id,\r\n            \"author\": ticket.author\r\n        };\r\n        ticketService.updateTicketPriority(json);\r\n    }\r\n\r\n    componentDidMount() {\r\n        ticketService.getTickets(3).then(res => {\r\n            const tickets = res.data;\r\n            this.setState({tickets})\r\n        });\r\n    }\r\n\r\n    archiveTicket(ticket) {\r\n        window.location.reload();\r\n        let json: {} = {\r\n            \"ticket_id\": ticket.ticket_id,\r\n            \"headline\": ticket.headline,\r\n            \"content\": ticket.content,\r\n            \"priority\": 3,\r\n            \"category\": ticket.category,\r\n            \"picture\": ticket.picture,\r\n            \"post_date\": ticket.post_date,\r\n            \"author\": ticket.author\r\n        };\r\n        ticketService.solveTicket(json);\r\n    }\r\n\r\n    convertDateTimeFromSQL(date) {\r\n        var str = date.split('-');\r\n        var year = str[0];\r\n        var month = str[1];\r\n        var rest = str[2];\r\n        var time = rest.split('T');\r\n        var day = time[0];\r\n        var restTime = time[1].split(':');\r\n        var hour = restTime[0];\r\n        var minute = restTime[1];\r\n        return 'Ticket posted: ' + hour + ':' + minute + ', ' + day + '.' + month + '.' + year;\r\n    }\r\n\r\n}\r\n\r\n","// @flow\r\nimport {Component} from \"react-simplified\";\r\nimport React from 'react';\r\n\r\nexport class Faq extends Component {\r\n    render() : void{\r\n        return(\r\n            <div className=\"card col-lg4 m-4 bg-dark text-white\">\r\n                <div className=\"card-header\"><h2 className=\"card-title\">Frequently asked questions</h2></div>\r\n                <div className=\"m-4\">\r\n\r\n                    <h5>When will I get my order?</h5>\r\n                    <p>The pre order status can be found on the product page</p>\r\n\r\n                    <h5>Where can i find the product page?</h5>\r\n                    <p>You can find the product page on the product page. </p>\r\n\r\n                    <h5>When is the next pre order?</h5>\r\n                    <p>The next pre order is December 2019</p>\r\n\r\n                    <h5>What is the difference between Klippe and Fjell?</h5>\r\n                    <p>Fjell is a more premium offering with chamfered edges and more case material.</p>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","// @flow\r\n\r\nimport React from 'react';\r\nimport {Form, Button} from 'react-bootstrap'\r\nimport {ticketService} from \"../network/services\";\r\n\r\n\r\nexport class SubmitForm extends React.Component {\r\n    state : {\r\n        headline: string,\r\n        content: string,\r\n        priority: number,\r\n        picture: string,\r\n        post_date: string,\r\n        email: string,\r\n        group_id: number,\r\n        author: string\r\n    };\r\n\r\n\r\n    constructor(props : Object) {\r\n        super(props);\r\n        this.state = {\r\n            headline: '',\r\n            content: '',\r\n            priority: 2,\r\n            picture: '',\r\n            post_date: '2000-01-01 00:00:00',\r\n            email: '',\r\n            group_id: 1,\r\n            author: '',\r\n        };\r\n\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n        console.log(name + \" verdi: \" + value);\r\n\r\n        this.setState({[name]: value,});\r\n    }\r\n\r\n    handleSubmit(event : Object) {\r\n        event.preventDefault();\r\n        this.submitTicket();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card col-lg4 m-4 bg-dark text-white\">\r\n                <div className=\"card-header\"><h2 className=\"card-title\">Submit a new ticket</h2></div>\r\n                <div class=\"m-4\">\r\n                    <Form onSubmit={this.handleSubmit}>\r\n\r\n                        <Form.Group>\r\n                            <Form.Control type=\"number\" name=\"headline\" placeholder=\"Enter order number\"\r\n                                          value={this.state.headline} onChange={this.handleInputChange}/>\r\n                            <Form.Text> This field only accept numbers </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group>\r\n                            <Form.Control type=\"text\" maxLength=\"255\" name=\"author\" placeholder=\"Enter your name\"\r\n                                          value={this.state.author} onChange={this.handleInputChange}/>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group>\r\n                            <Form.Control as=\"textarea\" rows=\"6\" cols=\"40\" name=\"content\" maxLength=\"255\"\r\n                                          placeholder=\"Please briefly explain the issue\" value={this.state.content}\r\n                                          onChange={this.handleInputChange}/>\r\n                            <Form.Text> Max length: 255 </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group>\r\n                            <Form.Control type=\"email\" name=\"email\" placeholder=\"Enter your email\"\r\n                                          value={this.state.email} onChange={this.handleInputChange}/>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group>\r\n                            <Form.Control type=\"text\" maxLength=\"255\" name=\"picture\"\r\n                                          placeholder=\"Please enter a picture URL\" value={this.state.picture}\r\n                                          onChange={this.handleInputChange}/>\r\n                        </Form.Group>\r\n\r\n                        <div class=\"card-footer\">\r\n                            <Form.Group>\r\n                                <Button variant=\"btn btn-primary btn-lg\" type=\"submit\"> Submit </Button>\r\n                            </Form.Group>\r\n                        </div>\r\n\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    submitTicket() : void{\r\n        let picture = this.state.picture;\r\n\r\n        if(this.state.picture === ''){\r\n            picture = \"http://i.imgur.com/zz26WUB.jpg\";\r\n        }\r\n\r\n        let json: {} = {\r\n            \"headline\": this.state.headline,\r\n            \"content\": this.state.content,\r\n            \"priority\": this.state.priority,\r\n            \"picture\": picture,\r\n            \"post_date\": this.state.post_date,\r\n            \"group_id\": this.state.group_id,\r\n            \"author\": this.state.author\r\n        };\r\n\r\n\r\n\r\n        ticketService.createTicket(json).then(res => console.log(res));\r\n        alert(\"Thank you, you will hear from us shortly.\");\r\n        window.location.reload();\r\n\r\n    }\r\n\r\n}","// @flow\r\n\r\nimport ReactDOM from 'react-dom';\r\nimport {HashRouter, Route} from 'react-router-dom';\r\nimport React from 'react'\r\nimport {Component} from 'react-simplified';\r\nimport {Alert, NavBar} from './widgets';\r\nimport {TicketList, FocusedTicket} from './content/tickets';\r\nimport {ToolBar} from \"./content/tools\";\r\nimport {ArchiveList} from './content/archive';\r\nimport {Faq} from './content/faq'\r\nimport {SubmitForm} from './content/submit';\r\n\r\n//menu for navigation\r\nclass Menu extends Component {\r\n    render() {\r\n        return (\r\n            <NavBar variant=\"dark\" brand=\"Mekanisk Support Dashboard\">\r\n                <NavBar.Link to=\"/tickets\">Tickets</NavBar.Link>\r\n                <NavBar.Link to=\"/archive\">Archive</NavBar.Link>\r\n            </NavBar>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n//homepage\r\nclass Footer extends Component {\r\n    render() {\r\n        return (\r\n            <div class=\"card\">\r\n                <p class=\"text-muted\">\r\n                    Copyright Mekanisk AS 2019\r\n                </p>\r\n\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\n//main tree of components\r\nconst root = document.getElementById('root');\r\nif (root)\r\n    ReactDOM.render(\r\n        <HashRouter>\r\n            <div className=\"bg-light\">\r\n                <Alert/>\r\n                <Menu/>\r\n                <Route exact path=\"/\" component={Faq}/>\r\n                <Route exact path=\"/\" component={SubmitForm}/>\r\n                <Route path=\"/tickets\" component={ToolBar}/>\r\n                <Route path=\"/tickets\" component={FocusedTicket}/>\r\n                <Route path=\"/tickets\" component={TicketList}/>\r\n                <Route path=\"/archive\" component={ArchiveList}/>\r\n                <Footer/>\r\n            </div>\r\n        </HashRouter>,\r\n        root\r\n    );\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}